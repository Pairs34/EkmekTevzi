unit uBagisEx;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore,
  dxSkinsDefaultPainters, Vcl.Menus, Vcl.StdCtrls, cxButtons, cxMemo,
  cxTextEdit, cxGroupBox,Uni, cxClasses, cxLocalization,System.DateUtils,
  cxCheckBox, dxToggleSwitch, cxStyles,
  cxDataStorage, cxNavigator,
  cxDataControllerConditionalFormattingRulesManagerDialog, Data.DB, cxDBData,
  cxGridLevel, cxGridCustomTableView, cxGridTableView, cxGridDBTableView,
  cxGridCustomView, cxGrid, DBAccess, VirtualTable,StrUtils, dxSkinBlack,
  dxSkinBlue, dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkroom,
  dxSkinDarkSide, dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkinLilian, dxSkinLiquidSky,
  dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis, dxSkinMetropolisDark,
  dxSkinMoneyTwins, dxSkinOffice2007Black, dxSkinOffice2007Blue,
  dxSkinOffice2007Green, dxSkinOffice2007Pink, dxSkinOffice2007Silver,
  dxSkinOffice2010Black, dxSkinOffice2010Blue, dxSkinOffice2010Silver,
  dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray, dxSkinOffice2013White,
  dxSkinOffice2016Colorful, dxSkinOffice2016Dark, dxSkinOffice2019Colorful,
  dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus,
  dxSkinSilver, dxSkinSpringtime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinTheBezier, dxSkinValentine,
  dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxCustomData, cxFilter, cxData, dxDateRanges, MemDS,
  cxMaskEdit, cxDropDownEdit, cxCheckComboBox;

type
  TfrmBagisEx = class(TForm)
    lblBuyukAdSoyad: TLabel;
    lblBuyukHak: TLabel;
    txtCardID: TEdit;
    cxGroupBox: TcxGroupBox;
    lblAdSoyad: TLabel;
    lblHak: TLabel;
    lblTel: TLabel;
    lblAdres: TLabel;
    lblNufus: TLabel;
    txtAdsoyad: TcxTextEdit;
    txtNufus: TcxTextEdit;
    txtTel: TcxTextEdit;
    txtAdres: TcxMemo;
    txtAdet: TcxTextEdit;
    lblBagisTuru: TLabel;
    btnRefreshBagisTurleri: TcxButton;
    bagisLocalizer: TcxLocalizer;
    btnMazeretEkle: TcxButton;
    lblSonHareket: TLabel;
    btnSadeceSorgu: TdxToggleSwitch;
    cxGrid: TcxGrid;
    cxGridDBTableView: TcxGridDBTableView;
    cxGridDBTableViewKartId: TcxGridDBColumn;
    cxGridDBTableViewAdSoyad: TcxGridDBColumn;
    cxGridDBTableViewBaTr: TcxGridDBColumn;
    cxGridDBTableViewDBColumn01: TcxGridDBColumn;
    cxGridDBTableViewDBColumn02: TcxGridDBColumn;
    cxGridDBTableViewDBColumn03: TcxGridDBColumn;
    cxGridDBTableViewDBColumn04: TcxGridDBColumn;
    cxGridDBTableViewDBColumn05: TcxGridDBColumn;
    cxGridDBTableViewDBColumn06: TcxGridDBColumn;
    cxGridDBTableViewDBColumn07: TcxGridDBColumn;
    cxGridDBTableViewDBColumn08: TcxGridDBColumn;
    cxGridDBTableViewDBColumn09: TcxGridDBColumn;
    cxGridDBTableViewDBColumn10: TcxGridDBColumn;
    cxGridDBTableViewDBColumn11: TcxGridDBColumn;
    cxGridDBTableViewDBColumn12: TcxGridDBColumn;
    cxGridDBTableViewDBColumn13: TcxGridDBColumn;
    cxGridDBTableViewDBColumn14: TcxGridDBColumn;
    cxGridDBTableViewDBColumn15: TcxGridDBColumn;
    cxGridDBTableViewDBColumn16: TcxGridDBColumn;
    cxGridDBTableViewDBColumn17: TcxGridDBColumn;
    cxGridDBTableViewDBColumn18: TcxGridDBColumn;
    cxGridDBTableViewDBColumn19: TcxGridDBColumn;
    cxGridDBTableViewDBColumn20: TcxGridDBColumn;
    cxGridDBTableViewDBColumn22: TcxGridDBColumn;
    cxGridDBTableViewDBColumn23: TcxGridDBColumn;
    cxGridDBTableViewDBColumn24: TcxGridDBColumn;
    cxGridDBTableViewDBColumn25: TcxGridDBColumn;
    cxGridDBTableViewDBColumn26: TcxGridDBColumn;
    cxGridDBTableViewDBColumn27: TcxGridDBColumn;
    cxGridDBTableViewDBColumn28: TcxGridDBColumn;
    cxGridDBTableViewDBColumn29: TcxGridDBColumn;
    cxGridDBTableViewDBColumn30: TcxGridDBColumn;
    cxGridDBTableViewDBColumn31: TcxGridDBColumn;
    cxGridLevel: TcxGridLevel;
    vAylikHareket: TVirtualTable;
    tblVAylikHareket: TUniDataSource;
    cxStyleRepository: TcxStyleRepository;
    cxRedStyle: TcxStyle;
    cxGreenStyle: TcxStyle;
    cxBlueStyle: TcxStyle;
    cbMultiBagis: TcxCheckComboBox;
    procedure FormShow(Sender: TObject);
    procedure btnRefreshBagisTurleriClick(Sender: TObject);
    procedure txtCardIDChange(Sender: TObject);
    procedure btnMazeretEkleClick(Sender: TObject);
    procedure cxGridDBTableViewStylesGetContentStyle(
      Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
      AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
    procedure Button1Click(Sender: TObject);
  private
    procedure LoadBagislar;
    function GetCheckedItems : TStringList;
    const
      sLineBreak = {$IFDEF LINUX} AnsiChar(#10) {$ENDIF}
               {$IFDEF MSWINDOWS} AnsiString(#13#10) {$ENDIF};
  public
    { Public declarations }
  end;

TYPE
  TStringListHelper = CLASS HELPER FOR TStrings
                        FUNCTION ToSQL : STRING;
                      END;
var
  frmBagisEx: TfrmBagisEx;
  MyCards : TStringList;
implementation

{$R *.dfm}

uses uGlobals, uDbHelper, uMazeret;

FUNCTION TStringListHelper.ToSQL : STRING;
  VAR
    S : STRING;

  FUNCTION QuotedStr(CONST S : STRING) : STRING;
    BEGIN
      Result:= '''' + ReplaceStr(S,'','''') + ''''
    END;

BEGIN
  Result:='';
  FOR S IN Self DO BEGIN
    IF Result='' THEN Result:='' ELSE Result:=Result+',';
    Result:=Result+QuotedStr(S)
  END;
  IF Result<>'' THEN Result:=Result;
END;

procedure TfrmBagisEx.btnMazeretEkleClick(Sender: TObject);
begin
    if (txtCardID.Text <> '') then
    begin
      Application.CreateForm(TfrmMazeret,frmMazeret);
      frmMazeret.txtKartID.Text := txtCardID.Text;
      frmMazeret.ShowModal;
    end else begin
      ShowMessage('Kart ID boş olmamalı.');
    end;
end;

procedure TfrmBagisEx.btnRefreshBagisTurleriClick(Sender: TObject);
begin
  LoadBagislar;
end;

procedure TfrmBagisEx.Button1Click(Sender: TObject);
begin
  GetCheckedItems;
end;

procedure TfrmBagisEx.cxGridDBTableViewStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
begin
  if not Assigned(AItem) then
     Exit;

  if AItem.Index > 3 then begin
    if ARecord.Values[AItem.Index] = 'X' then begin
      AStyle := cxGreenStyle;
    end else if ARecord.Values[AItem.Index] = 'M' then begin
      AStyle := cxBlueStyle;
    end else begin
      AStyle := cxRedStyle;
    end;
  end;
end;

procedure TfrmBagisEx.FormShow(Sender: TObject);
begin
  LoadBagislar;
  ToTranslate(bagisLocalizer);
  ClearGrid(cxGridDBTableView);
  MyCards := TStringList.Create;
end;

procedure TfrmBagisEx.LoadBagislar;
var
  bSqlCode: string;
  bQuery: TUniQuery;
  bItem : TcxCheckComboBoxItem;
begin
  bSqlCode := 'select * from bagisturu';
  bQuery := FromDatabase(bSqlCode);
  try
    with bQuery do
    begin
      while not eof do
      begin
        bItem := cbMultiBagis.Properties.Items.Add();
        bItem.Description := FieldByName('BagisAdi').AsString;
        Next;
      end;
    end;
  except
    on E: EAccessViolation do
    begin
    end;
  end;
end;

function TfrmBagisEx.GetCheckedItems : TStringList;
var
  CheckedItems: TStringList;
  APCheckStates: ^TcxCheckStates;
  i: Integer;
begin
  CheckedItems := TStringList.Create;
  New(APCheckStates);
  try
    CalculateCheckStates(cbMultiBagis.Value, cbMultiBagis.Properties.Items, cbMultiBagis.Properties.EditValueFormat, APCheckStates^);
    for i := 0 to cbMultiBagis.Properties.Items.Count - 1 do
      if APCheckStates^[I] = cbsChecked then
        CheckedItems.Add(cbMultiBagis.Properties.Items[I].Description);
  finally
    Dispose(APCheckStates);
  end;

  Result := CheckedItems;
end;

procedure TfrmBagisEx.txtCardIDChange(Sender: TObject);
var
  LastAction : string;
  I,X,MResult,bGunFarki : integer;
  IsAvailable,CheckedItem : string;
  CheckedItems : TStringList;
begin
    CheckedItems := GetCheckedItems;

    if txtCardID.Text = '' then
       Exit;

    if CheckedItems.Count = 0 then
    begin
        ShowMessage('Bağış türü seçmediniz.');
        txtCardID.Clear;
        Exit;
    end;

    with frmDb do
    begin
      if not dbHelper.Connected then
        dbHelper.Connect;

      with myQuery do
      begin
        try
          SQL.Clear;
          SQL.Add('select * from hareket where convert(date,IslemZamani) = convert(date,:tarih) ');
          SQL.Add('and KartId = :kartid and BagisTuru in (select TRIM(value) from string_split(:BagisTur,'',''))');
          ParamByName('kartid').Value := txtCardID.Text;
          ParamByName('tarih').Value := Now;
          ParamByName('BagisTur').Value := CheckedItems.CommaText;
          ExecSQL;

          if RecordCount >= 1 then
          begin
            if (RecordCount > 0) and (txtCardID.Text <> '') then begin
              ShowMessage('Bu arkadaş 24 saat içinde ' + CheckedItems.CommaText +' almış.');
              Exit;
            end;
          end;


          SQL.Clear;
          SQL.Text := 'select * from users where KartId = :kartid';
          ParamByName('kartid').Value := txtCardID.Text;
          ExecSQL;

          if (RecordCount = 0) and (txtCardID.Text <> '') then begin
            Beep;
            ShowMessage('Bu kart sistemde kayıtlı değil.');
            Exit;
          end;

          if FieldByName('Aktif').AsString = 'Pasif' then begin
            if not btnSadeceSorgu.Checked then
            begin
                Mresult := MessageDlg(format('%s nolu kart şu sebeple pasiftir : '
                  + sLineBreak +'%s',[txtCardID.Text,FieldByName('Aciklama').AsString]),mtInformation,[mbYes,mbCancel], 0);
                if MResult = mrCancel then
                begin
                   Exit;
                end;
            end else begin
               ShowMessage(format('%s nolu kart şu sebeple pasiftir : '
                  + sLineBreak +'%s',[txtCardID.Text,FieldByName('Aciklama').AsString]));
            end;
          end;

          if MyCards.Count >= 3 then
          begin
            MyCards.Delete(0);
          end;

          if MyCards.IndexOf(txtCardId.Text) = -1 then
              MyCards.Add(txtCardID.Text);

          txtAdsoyad.Text := FieldByName('AdSoyad').AsString;
          txtAdet.Text :=  FieldByName('Adet').AsString;
          txtTel.Text :=  FieldByName('TelNo').AsString;
          txtAdres.Text :=  FieldByName('Adres').AsString;
          txtNufus.Text :=  FieldByName('Nufus').AsString;
          lblBuyukAdSoyad.Caption := FieldByName('AdSoyad').AsString;
          lblBuyukHak.Caption := FieldByName('Adet').AsString;

          Close;
          SQL.Clear;
          SQL.Text := 'select * from GetLastAction where KartId = :KartId';
          ParamByName('KartId').AsString := txtCardID.Text;
          ExecSQL;

          if (RecordCount > 0) then
          begin
            LastAction := FieldByName('IslemZamani').AsString;
            if(DaysBetween(Now,VarToDateTime(LastAction)) > 1) then
            begin
              lblSonHareket.Font.Color := clRed;
              lblSonHareket.Caption := LastAction;
            end else begin
              lblSonHareket.Font.Color := clDefault;
              lblSonHareket.Caption := LastAction;
            end;
          end;

          if not btnSadeceSorgu.Checked then
          begin
              for CheckedItem in CheckedItems do begin
                 EkmekVer(txtCardID.Text, CheckedItem, txtAdsoyad.Text, Now);
                 //ShowMessage(CheckedItem);
              end;
          end;
        except
          on E: Exception do
            ShowMessage(E.Message);
        end;
      end;

      cxGridDBTableView.ClearItems;

      with frmDb do
      begin
        with GetAylikRapor do
        begin
          ParamByName('Yil').AsInteger := YearOf(Now);
          ParamByName('Ay').AsInteger := MonthOf(Now);
          ParamByName('kartid').AsString := MyCards.CommaText;
          ParamByName('BagisTuru').AsString := '';
          Prepare;
          ExecProc;
        end;
      end;

      cxGridDBTableView.DataController.DataSource := frmDb.tblAylikRapor;
      cxGridDBTableView.DataController.CreateAllItems;
      end;
end;

end.
